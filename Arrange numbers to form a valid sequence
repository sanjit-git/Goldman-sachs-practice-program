Given an array arr[] with N distinct numbers and another array arr1[] with N-1 operators (either < or >), the task is to organize the numbers to form a valid sequence which obeys relational operator rules with respect to provided operators.

Examples:

    Input: arr[] = {3, 12, 7, 8, 5}; arr1= {‘<‘, ‘>’, ‘>’, ‘<‘}
    Output: {3, 12, 8, 5, 7}
    Explanation:
    3 < 12 > 8 > 5 < 7
    There can be more such combinations. The task is to return one of the combinations.


    Input: arr[] = {8, 2, 7, 1, 5, 9}; arr1[] = {‘>’, ‘>’, ‘<‘, ‘>’, ‘<‘}
    Output:{9, 8, 1, 7, 2, 5}
    Explanation:
    9 > 8 > 1 < 7 > 2 < 5 
	
	

/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
	
	static int[] orgazineInOrder(int []vec,int[] op, int n) 
{ 
    int []result = new int[n]; 
      
    // Sorting the array 
    Arrays.sort(vec); 
  
    int i = 0, j = n - 1, k = 0; 
    while (i <= j && k <= n - 2)  
    { 
        // Two pointer technique 
        // to organize the numbers 
        if (op[k] == '<')  
        { 
            result[k] = vec[i++]; 
        } 
        else
        { 
            result[k] = vec[j--]; 
        } 
        k++; 
    } 
    result[n - 1] = vec[i]; 
  
    return result; 
} 
  
// Driver code 
public static void main (String[] args) throws java.lang.Exception
	{
    int []vec ={ 8, 2, 7, 1, 5, 9 }; 
  
    int[] op ={ '>', '>', '<', 
                    '>', '<' }; 
  
    int []result = orgazineInOrder(vec, 
                        op, vec.length); 
  
    for (int i = 0; i < result.length; i++)  
    { 
        System.out.print(result[i]+ " "); 
    } 
} 
}
